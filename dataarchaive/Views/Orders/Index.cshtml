@model dataarchaive.ViewModels.OrdersViewModel

<style>
    /* Progress Container Styles */
    .progress-container {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .progress-wrapper {
        max-width: 600px;
        margin: 0 auto;
    }

    .progress-info {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 14px;
    }

    .progress-status {
        font-weight: 600;
        color: #495057;
    }

    .progress-percent {
        font-weight: 700;
        color: #2c3e50;
    }

    /* Progress Bar Styles */
    .progress-bar-container {
        height: 16px;
        background: #e9ecef;
        border-radius: 8px;
        overflow: hidden;
        position: relative;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .progress-bar {
        height: 100%;
        width: 100%;
        position: relative;
    }

    .progress-fill {
        height: 100%;
        width: 0%;
        background: linear-gradient(90deg, #3498db, #2ecc71);
        border-radius: 8px;
        transition: width 0.3s ease, background-color 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient( 90deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.3) 50%, rgba(255, 255, 255, 0.1) 100% );
            animation: shimmer 2s infinite linear;
        }

    .progress-indicator {
        position: absolute;
        right: 0;
        top: -4px;
        width: 4px;
        height: 24px;
        background: #fff;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.8);
        border-radius: 2px;
        transform: translateX(50%);
        z-index: 2;
    }

    .progress-details {
        text-align: center;
        margin-top: 10px;
        font-size: 13px;
        color: #6c757d;
    }

    /* Animation */
    @@keyframes shimmer {
        0%

    {
        transform: translateX(-100%);
    }

    100% {
        transform: translateX(100%);
    }

    }

    /* Success State */
    .progress-success .progress-fill {
        background: linear-gradient(90deg, #2ecc71, #27ae60);
    }

    /* Error State */
    .progress-error .progress-fill {
        background: linear-gradient(90deg, #e74c3c, #c0392b);
    }

    /* Add these to your CSS for extra effects */
    .pulse {
        animation: pulse 0.3s ease;
    }

    @@keyframes pulse {
        0%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.02);
    }

    100% {
        transform: scale(1);
    }

    }

    .result-icon {
        margin-left: 5px;
        font-weight: bold;
    }

    .progress-success .result-icon {
        color: #27ae60;
    }

    .progress-error .result-icon {
        color: #c0392b;
    }
</style>

<div class="container">
    <h1>Order Archiving System</h1>

    <form id="orderForm" method="post" asp-action="AddOrder">
        <div class="form-group">
            <label for="orderNo">Order Number:</label>
            <input type="text" id="orderNo" name="orderNo" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="orderName">Order Name:</label>
            <input type="text" id="orderName" name="orderName" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Add Order</button>
    </form>

    <div class="progress-container" id="progressContainer" style="display: none;">
        <div class="progress-wrapper">
            <div class="progress-info">
                <span class="progress-status" id="statusText">Preparing to archive...</span>
                <span class="progress-percent" id="progressText">0%</span>
            </div>
            <div class="progress-bar-container">
                <div class="progress-bar" id="progressBar">
                    <div class="progress-fill" id="progressFill"></div>
                    <div class="progress-indicator"></div>
                </div>
            </div>
            <div class="progress-details" id="progressDetails">
                <span class="processed-count">0</span> of
                <span class="total-count">0</span> orders archived
            </div>
        </div>
    </div>

    <h2>Current Orders</h2>
    <div class="action-buttons mb-3">
        <button id="archiveSelectedBtn" class="btn btn-success" disabled>Archive Selected</button>
        <button id="selectAllBtn" class="btn btn-secondary">Select All</button>
        <button id="deselectAllBtn" class="btn btn-secondary">Deselect All</button>
    </div>

    <table class="table table-bordered table-striped" id="currentOrders">
        <thead>
            <tr>
                <th style="width: 20px;"><input type="checkbox" id="selectAllCheckbox"></th>
                <th>Order No</th>
                <th>Order Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Model.ActiveOrders)
            {
                <tr>
                    <td><input type="checkbox" class="order-checkbox" value="@order.Id"></td>
                    <td>@order.OrderNo</td>
                    <td>@order.OrderName</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Archived Orders</h2>
    <table class="table table-bordered table-striped" id="archivedOrders">
        <thead>
            <tr>
                <th>Order No</th>
                <th>Order Name</th>
                <th>Archived Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Model.ArchivedOrders)
            {
                <tr>
                    <td>@order.OrderNo</td>
                    <td>@order.OrderName</td>
                    <td>@order.ArchivedDate.ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Update archive button state
            function updateArchiveButtonState() {
                const checkedBoxes = $('.order-checkbox:checked');
                $('#archiveSelectedBtn').prop('disabled', checkedBoxes.length === 0);
            }

            // Select all orders
            $('#selectAllBtn').click(function() {
                $('.order-checkbox').prop('checked', true);
                updateArchiveButtonState();
            });

            // Deselect all orders
            $('#deselectAllBtn').click(function() {
                $('.order-checkbox').prop('checked', false);
                updateArchiveButtonState();
            });

            // Checkbox change event
            $(document).on('change', '.order-checkbox', updateArchiveButtonState);

            // Archive selected orders
                    $('#archiveSelectedBtn').click(function() {
            const orderIds = $('.order-checkbox:checked').map(function() {
                return $(this).val();
            }).get();

            if (orderIds.length === 0) return;

            // Show progress bar with animation
                   function showProgress(totalOrders) {
            const progressContainer = $('#progressContainer');
            const progressFill = $('#progressFill');
            const progressText = $('#progressText');
            const statusText = $('#statusText');
            const progressDetails = $('#progressDetails');

            // Initialize UI
            progressContainer.show().removeClass('progress-success progress-error');
            progressFill.css('width', '0%');
            statusText.text('Starting archiving process...');
            progressDetails.html(`<span class="processed-count">0</span> of <span class="total-count">${totalOrders}</span> orders archived`);
        }

        function updateProgress(current, total, currentMessage) {
            const percentage = Math.round((current / total) * 100);

            $('#progressFill').css('width', percentage + '%');
            $('#progressText').text(percentage + '%');
            $('#statusText').text(currentMessage);
            $('.processed-count').text(current);

            // Add pulse animation every 10%
            if (percentage % 10 === 0) {
                $('#progressFill').addClass('pulse');
                setTimeout(() => $('#progressFill').removeClass('pulse'), 300);
            }
        }

        function completeProgress(success, message) {
            const progressContainer = $('#progressContainer');

            if (success) {
                progressContainer.addClass('progress-success');
                $('#progressFill').css('width', '100%');
                $('#progressText').text('100%');
                statusText.text(message);
            } else {
                progressContainer.addClass('progress-error');
                statusText.text(message);
            }

            // Add checkmark or X icon
            const icon = success ? '✓' : '✗';
            $('#progressDetails').append(` <span class="result-icon">${icon}</span>`);
        }

        // Usage in your archive function
        $('#archiveSelectedBtn').click(function() {
            const orderIds = $('.order-checkbox:checked').map(function() {
                return $(this).val();
            }).get();

            if (orderIds.length === 0) return;

            // Initialize progress
            showProgress(orderIds.length);

            // Process orders with simulated delay
            let processed = 0;
            const total = orderIds.length;
            const processNext = () => {
                if (processed >= total) {
                    // All orders processed
                    $.ajax({
                        url: '/Orders/ArchiveOrders',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(orderIds),
                        success: function() {
                            completeProgress(true, `Successfully archived ${total} orders!`);
                            setTimeout(() => location.reload(), 2000);
                        },
                        error: function() {
                            completeProgress(false, 'Error archiving orders');
                        }
                    });
                    return;
                }

                // Simulate processing
                processed++;
                updateProgress(
                    processed,
                    total,
                    `Archiving order ${processed} of ${total}...`
                );

                // Process next order after short delay
                setTimeout(processNext, 200 + Math.random() * 300);
            };

            // Start processing
            processNext();
         });
        });
        });
    </script>
}
